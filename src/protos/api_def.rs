// This file is generated by rust-protobuf 2.6.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ApiDef {
    // message fields
    pub graph_op_name: ::std::string::String,
    pub deprecation_message: ::std::string::String,
    pub deprecation_version: i32,
    pub visibility: ApiDef_Visibility,
    pub endpoint: ::protobuf::RepeatedField<ApiDef_Endpoint>,
    pub in_arg: ::protobuf::RepeatedField<ApiDef_Arg>,
    pub out_arg: ::protobuf::RepeatedField<ApiDef_Arg>,
    pub arg_order: ::protobuf::RepeatedField<::std::string::String>,
    pub attr: ::protobuf::RepeatedField<ApiDef_Attr>,
    pub summary: ::std::string::String,
    pub description: ::std::string::String,
    pub description_prefix: ::std::string::String,
    pub description_suffix: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiDef {
    fn default() -> &'a ApiDef {
        <ApiDef as ::protobuf::Message>::default_instance()
    }
}

impl ApiDef {
    pub fn new() -> ApiDef {
        ::std::default::Default::default()
    }

    // string graph_op_name = 1;


    pub fn get_graph_op_name(&self) -> &str {
        &self.graph_op_name
    }
    pub fn clear_graph_op_name(&mut self) {
        self.graph_op_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_graph_op_name(&mut self, v: ::std::string::String) {
        self.graph_op_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_graph_op_name(&mut self) -> &mut ::std::string::String {
        &mut self.graph_op_name
    }

    // Take field
    pub fn take_graph_op_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.graph_op_name, ::std::string::String::new())
    }

    // string deprecation_message = 12;


    pub fn get_deprecation_message(&self) -> &str {
        &self.deprecation_message
    }
    pub fn clear_deprecation_message(&mut self) {
        self.deprecation_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_deprecation_message(&mut self, v: ::std::string::String) {
        self.deprecation_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deprecation_message(&mut self) -> &mut ::std::string::String {
        &mut self.deprecation_message
    }

    // Take field
    pub fn take_deprecation_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deprecation_message, ::std::string::String::new())
    }

    // int32 deprecation_version = 13;


    pub fn get_deprecation_version(&self) -> i32 {
        self.deprecation_version
    }
    pub fn clear_deprecation_version(&mut self) {
        self.deprecation_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_deprecation_version(&mut self, v: i32) {
        self.deprecation_version = v;
    }

    // .tensorflow.ApiDef.Visibility visibility = 2;


    pub fn get_visibility(&self) -> ApiDef_Visibility {
        self.visibility
    }
    pub fn clear_visibility(&mut self) {
        self.visibility = ApiDef_Visibility::DEFAULT_VISIBILITY;
    }

    // Param is passed by value, moved
    pub fn set_visibility(&mut self, v: ApiDef_Visibility) {
        self.visibility = v;
    }

    // repeated .tensorflow.ApiDef.Endpoint endpoint = 3;


    pub fn get_endpoint(&self) -> &[ApiDef_Endpoint] {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::protobuf::RepeatedField<ApiDef_Endpoint>) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoint(&mut self) -> &mut ::protobuf::RepeatedField<ApiDef_Endpoint> {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::protobuf::RepeatedField<ApiDef_Endpoint> {
        ::std::mem::replace(&mut self.endpoint, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.ApiDef.Arg in_arg = 4;


    pub fn get_in_arg(&self) -> &[ApiDef_Arg] {
        &self.in_arg
    }
    pub fn clear_in_arg(&mut self) {
        self.in_arg.clear();
    }

    // Param is passed by value, moved
    pub fn set_in_arg(&mut self, v: ::protobuf::RepeatedField<ApiDef_Arg>) {
        self.in_arg = v;
    }

    // Mutable pointer to the field.
    pub fn mut_in_arg(&mut self) -> &mut ::protobuf::RepeatedField<ApiDef_Arg> {
        &mut self.in_arg
    }

    // Take field
    pub fn take_in_arg(&mut self) -> ::protobuf::RepeatedField<ApiDef_Arg> {
        ::std::mem::replace(&mut self.in_arg, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.ApiDef.Arg out_arg = 5;


    pub fn get_out_arg(&self) -> &[ApiDef_Arg] {
        &self.out_arg
    }
    pub fn clear_out_arg(&mut self) {
        self.out_arg.clear();
    }

    // Param is passed by value, moved
    pub fn set_out_arg(&mut self, v: ::protobuf::RepeatedField<ApiDef_Arg>) {
        self.out_arg = v;
    }

    // Mutable pointer to the field.
    pub fn mut_out_arg(&mut self) -> &mut ::protobuf::RepeatedField<ApiDef_Arg> {
        &mut self.out_arg
    }

    // Take field
    pub fn take_out_arg(&mut self) -> ::protobuf::RepeatedField<ApiDef_Arg> {
        ::std::mem::replace(&mut self.out_arg, ::protobuf::RepeatedField::new())
    }

    // repeated string arg_order = 11;


    pub fn get_arg_order(&self) -> &[::std::string::String] {
        &self.arg_order
    }
    pub fn clear_arg_order(&mut self) {
        self.arg_order.clear();
    }

    // Param is passed by value, moved
    pub fn set_arg_order(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.arg_order = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arg_order(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.arg_order
    }

    // Take field
    pub fn take_arg_order(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.arg_order, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.ApiDef.Attr attr = 6;


    pub fn get_attr(&self) -> &[ApiDef_Attr] {
        &self.attr
    }
    pub fn clear_attr(&mut self) {
        self.attr.clear();
    }

    // Param is passed by value, moved
    pub fn set_attr(&mut self, v: ::protobuf::RepeatedField<ApiDef_Attr>) {
        self.attr = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attr(&mut self) -> &mut ::protobuf::RepeatedField<ApiDef_Attr> {
        &mut self.attr
    }

    // Take field
    pub fn take_attr(&mut self) -> ::protobuf::RepeatedField<ApiDef_Attr> {
        ::std::mem::replace(&mut self.attr, ::protobuf::RepeatedField::new())
    }

    // string summary = 7;


    pub fn get_summary(&self) -> &str {
        &self.summary
    }
    pub fn clear_summary(&mut self) {
        self.summary.clear();
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: ::std::string::String) {
        self.summary = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_summary(&mut self) -> &mut ::std::string::String {
        &mut self.summary
    }

    // Take field
    pub fn take_summary(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.summary, ::std::string::String::new())
    }

    // string description = 8;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string description_prefix = 9;


    pub fn get_description_prefix(&self) -> &str {
        &self.description_prefix
    }
    pub fn clear_description_prefix(&mut self) {
        self.description_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_description_prefix(&mut self, v: ::std::string::String) {
        self.description_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.description_prefix
    }

    // Take field
    pub fn take_description_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description_prefix, ::std::string::String::new())
    }

    // string description_suffix = 10;


    pub fn get_description_suffix(&self) -> &str {
        &self.description_suffix
    }
    pub fn clear_description_suffix(&mut self) {
        self.description_suffix.clear();
    }

    // Param is passed by value, moved
    pub fn set_description_suffix(&mut self, v: ::std::string::String) {
        self.description_suffix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description_suffix(&mut self) -> &mut ::std::string::String {
        &mut self.description_suffix
    }

    // Take field
    pub fn take_description_suffix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description_suffix, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ApiDef {
    fn is_initialized(&self) -> bool {
        for v in &self.endpoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.in_arg {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.out_arg {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.attr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.graph_op_name)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deprecation_message)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.deprecation_version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.visibility, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endpoint)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.in_arg)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.out_arg)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.arg_order)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attr)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.summary)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description_prefix)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description_suffix)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.graph_op_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.graph_op_name);
        }
        if !self.deprecation_message.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.deprecation_message);
        }
        if self.deprecation_version != 0 {
            my_size += ::protobuf::rt::value_size(13, self.deprecation_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.visibility != ApiDef_Visibility::DEFAULT_VISIBILITY {
            my_size += ::protobuf::rt::enum_size(2, self.visibility);
        }
        for value in &self.endpoint {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.in_arg {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.out_arg {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.arg_order {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        for value in &self.attr {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.summary.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.summary);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.description);
        }
        if !self.description_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.description_prefix);
        }
        if !self.description_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.description_suffix);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.graph_op_name.is_empty() {
            os.write_string(1, &self.graph_op_name)?;
        }
        if !self.deprecation_message.is_empty() {
            os.write_string(12, &self.deprecation_message)?;
        }
        if self.deprecation_version != 0 {
            os.write_int32(13, self.deprecation_version)?;
        }
        if self.visibility != ApiDef_Visibility::DEFAULT_VISIBILITY {
            os.write_enum(2, self.visibility.value())?;
        }
        for v in &self.endpoint {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.in_arg {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.out_arg {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.arg_order {
            os.write_string(11, &v)?;
        };
        for v in &self.attr {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.summary.is_empty() {
            os.write_string(7, &self.summary)?;
        }
        if !self.description.is_empty() {
            os.write_string(8, &self.description)?;
        }
        if !self.description_prefix.is_empty() {
            os.write_string(9, &self.description_prefix)?;
        }
        if !self.description_suffix.is_empty() {
            os.write_string(10, &self.description_suffix)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiDef {
        ApiDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "graph_op_name",
                    |m: &ApiDef| { &m.graph_op_name },
                    |m: &mut ApiDef| { &mut m.graph_op_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "deprecation_message",
                    |m: &ApiDef| { &m.deprecation_message },
                    |m: &mut ApiDef| { &mut m.deprecation_message },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "deprecation_version",
                    |m: &ApiDef| { &m.deprecation_version },
                    |m: &mut ApiDef| { &mut m.deprecation_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApiDef_Visibility>>(
                    "visibility",
                    |m: &ApiDef| { &m.visibility },
                    |m: &mut ApiDef| { &mut m.visibility },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApiDef_Endpoint>>(
                    "endpoint",
                    |m: &ApiDef| { &m.endpoint },
                    |m: &mut ApiDef| { &mut m.endpoint },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApiDef_Arg>>(
                    "in_arg",
                    |m: &ApiDef| { &m.in_arg },
                    |m: &mut ApiDef| { &mut m.in_arg },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApiDef_Arg>>(
                    "out_arg",
                    |m: &ApiDef| { &m.out_arg },
                    |m: &mut ApiDef| { &mut m.out_arg },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "arg_order",
                    |m: &ApiDef| { &m.arg_order },
                    |m: &mut ApiDef| { &mut m.arg_order },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApiDef_Attr>>(
                    "attr",
                    |m: &ApiDef| { &m.attr },
                    |m: &mut ApiDef| { &mut m.attr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "summary",
                    |m: &ApiDef| { &m.summary },
                    |m: &mut ApiDef| { &mut m.summary },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &ApiDef| { &m.description },
                    |m: &mut ApiDef| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description_prefix",
                    |m: &ApiDef| { &m.description_prefix },
                    |m: &mut ApiDef| { &mut m.description_prefix },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description_suffix",
                    |m: &ApiDef| { &m.description_suffix },
                    |m: &mut ApiDef| { &mut m.description_suffix },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApiDef>(
                    "ApiDef",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApiDef {
        static mut instance: ::protobuf::lazy::Lazy<ApiDef> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApiDef,
        };
        unsafe {
            instance.get(ApiDef::new)
        }
    }
}

impl ::protobuf::Clear for ApiDef {
    fn clear(&mut self) {
        self.graph_op_name.clear();
        self.deprecation_message.clear();
        self.deprecation_version = 0;
        self.visibility = ApiDef_Visibility::DEFAULT_VISIBILITY;
        self.endpoint.clear();
        self.in_arg.clear();
        self.out_arg.clear();
        self.arg_order.clear();
        self.attr.clear();
        self.summary.clear();
        self.description.clear();
        self.description_prefix.clear();
        self.description_suffix.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiDef {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApiDef_Endpoint {
    // message fields
    pub name: ::std::string::String,
    pub deprecated: bool,
    pub deprecation_version: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiDef_Endpoint {
    fn default() -> &'a ApiDef_Endpoint {
        <ApiDef_Endpoint as ::protobuf::Message>::default_instance()
    }
}

impl ApiDef_Endpoint {
    pub fn new() -> ApiDef_Endpoint {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bool deprecated = 3;


    pub fn get_deprecated(&self) -> bool {
        self.deprecated
    }
    pub fn clear_deprecated(&mut self) {
        self.deprecated = false;
    }

    // Param is passed by value, moved
    pub fn set_deprecated(&mut self, v: bool) {
        self.deprecated = v;
    }

    // int32 deprecation_version = 4;


    pub fn get_deprecation_version(&self) -> i32 {
        self.deprecation_version
    }
    pub fn clear_deprecation_version(&mut self) {
        self.deprecation_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_deprecation_version(&mut self, v: i32) {
        self.deprecation_version = v;
    }
}

impl ::protobuf::Message for ApiDef_Endpoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.deprecated = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.deprecation_version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.deprecated != false {
            my_size += 2;
        }
        if self.deprecation_version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.deprecation_version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.deprecated != false {
            os.write_bool(3, self.deprecated)?;
        }
        if self.deprecation_version != 0 {
            os.write_int32(4, self.deprecation_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiDef_Endpoint {
        ApiDef_Endpoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ApiDef_Endpoint| { &m.name },
                    |m: &mut ApiDef_Endpoint| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "deprecated",
                    |m: &ApiDef_Endpoint| { &m.deprecated },
                    |m: &mut ApiDef_Endpoint| { &mut m.deprecated },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "deprecation_version",
                    |m: &ApiDef_Endpoint| { &m.deprecation_version },
                    |m: &mut ApiDef_Endpoint| { &mut m.deprecation_version },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApiDef_Endpoint>(
                    "ApiDef_Endpoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApiDef_Endpoint {
        static mut instance: ::protobuf::lazy::Lazy<ApiDef_Endpoint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApiDef_Endpoint,
        };
        unsafe {
            instance.get(ApiDef_Endpoint::new)
        }
    }
}

impl ::protobuf::Clear for ApiDef_Endpoint {
    fn clear(&mut self) {
        self.name.clear();
        self.deprecated = false;
        self.deprecation_version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiDef_Endpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiDef_Endpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApiDef_Arg {
    // message fields
    pub name: ::std::string::String,
    pub rename_to: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiDef_Arg {
    fn default() -> &'a ApiDef_Arg {
        <ApiDef_Arg as ::protobuf::Message>::default_instance()
    }
}

impl ApiDef_Arg {
    pub fn new() -> ApiDef_Arg {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string rename_to = 2;


    pub fn get_rename_to(&self) -> &str {
        &self.rename_to
    }
    pub fn clear_rename_to(&mut self) {
        self.rename_to.clear();
    }

    // Param is passed by value, moved
    pub fn set_rename_to(&mut self, v: ::std::string::String) {
        self.rename_to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rename_to(&mut self) -> &mut ::std::string::String {
        &mut self.rename_to
    }

    // Take field
    pub fn take_rename_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rename_to, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ApiDef_Arg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rename_to)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.rename_to.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rename_to);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.rename_to.is_empty() {
            os.write_string(2, &self.rename_to)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiDef_Arg {
        ApiDef_Arg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ApiDef_Arg| { &m.name },
                    |m: &mut ApiDef_Arg| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rename_to",
                    |m: &ApiDef_Arg| { &m.rename_to },
                    |m: &mut ApiDef_Arg| { &mut m.rename_to },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &ApiDef_Arg| { &m.description },
                    |m: &mut ApiDef_Arg| { &mut m.description },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApiDef_Arg>(
                    "ApiDef_Arg",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApiDef_Arg {
        static mut instance: ::protobuf::lazy::Lazy<ApiDef_Arg> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApiDef_Arg,
        };
        unsafe {
            instance.get(ApiDef_Arg::new)
        }
    }
}

impl ::protobuf::Clear for ApiDef_Arg {
    fn clear(&mut self) {
        self.name.clear();
        self.rename_to.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiDef_Arg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiDef_Arg {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApiDef_Attr {
    // message fields
    pub name: ::std::string::String,
    pub rename_to: ::std::string::String,
    pub default_value: ::protobuf::SingularPtrField<super::attr_value::AttrValue>,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiDef_Attr {
    fn default() -> &'a ApiDef_Attr {
        <ApiDef_Attr as ::protobuf::Message>::default_instance()
    }
}

impl ApiDef_Attr {
    pub fn new() -> ApiDef_Attr {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string rename_to = 2;


    pub fn get_rename_to(&self) -> &str {
        &self.rename_to
    }
    pub fn clear_rename_to(&mut self) {
        self.rename_to.clear();
    }

    // Param is passed by value, moved
    pub fn set_rename_to(&mut self, v: ::std::string::String) {
        self.rename_to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rename_to(&mut self) -> &mut ::std::string::String {
        &mut self.rename_to
    }

    // Take field
    pub fn take_rename_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rename_to, ::std::string::String::new())
    }

    // .tensorflow.AttrValue default_value = 3;


    pub fn get_default_value(&self) -> &super::attr_value::AttrValue {
        self.default_value.as_ref().unwrap_or_else(|| super::attr_value::AttrValue::default_instance())
    }
    pub fn clear_default_value(&mut self) {
        self.default_value.clear();
    }

    pub fn has_default_value(&self) -> bool {
        self.default_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_default_value(&mut self, v: super::attr_value::AttrValue) {
        self.default_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_value(&mut self) -> &mut super::attr_value::AttrValue {
        if self.default_value.is_none() {
            self.default_value.set_default();
        }
        self.default_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_default_value(&mut self) -> super::attr_value::AttrValue {
        self.default_value.take().unwrap_or_else(|| super::attr_value::AttrValue::new())
    }

    // string description = 4;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ApiDef_Attr {
    fn is_initialized(&self) -> bool {
        for v in &self.default_value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rename_to)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.default_value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.rename_to.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rename_to);
        }
        if let Some(ref v) = self.default_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.rename_to.is_empty() {
            os.write_string(2, &self.rename_to)?;
        }
        if let Some(ref v) = self.default_value.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.description.is_empty() {
            os.write_string(4, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiDef_Attr {
        ApiDef_Attr::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ApiDef_Attr| { &m.name },
                    |m: &mut ApiDef_Attr| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rename_to",
                    |m: &ApiDef_Attr| { &m.rename_to },
                    |m: &mut ApiDef_Attr| { &mut m.rename_to },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::attr_value::AttrValue>>(
                    "default_value",
                    |m: &ApiDef_Attr| { &m.default_value },
                    |m: &mut ApiDef_Attr| { &mut m.default_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &ApiDef_Attr| { &m.description },
                    |m: &mut ApiDef_Attr| { &mut m.description },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApiDef_Attr>(
                    "ApiDef_Attr",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApiDef_Attr {
        static mut instance: ::protobuf::lazy::Lazy<ApiDef_Attr> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApiDef_Attr,
        };
        unsafe {
            instance.get(ApiDef_Attr::new)
        }
    }
}

impl ::protobuf::Clear for ApiDef_Attr {
    fn clear(&mut self) {
        self.name.clear();
        self.rename_to.clear();
        self.default_value.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiDef_Attr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiDef_Attr {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ApiDef_Visibility {
    DEFAULT_VISIBILITY = 0,
    VISIBLE = 1,
    SKIP = 2,
    HIDDEN = 3,
}

impl ::protobuf::ProtobufEnum for ApiDef_Visibility {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApiDef_Visibility> {
        match value {
            0 => ::std::option::Option::Some(ApiDef_Visibility::DEFAULT_VISIBILITY),
            1 => ::std::option::Option::Some(ApiDef_Visibility::VISIBLE),
            2 => ::std::option::Option::Some(ApiDef_Visibility::SKIP),
            3 => ::std::option::Option::Some(ApiDef_Visibility::HIDDEN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApiDef_Visibility] = &[
            ApiDef_Visibility::DEFAULT_VISIBILITY,
            ApiDef_Visibility::VISIBLE,
            ApiDef_Visibility::SKIP,
            ApiDef_Visibility::HIDDEN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ApiDef_Visibility", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ApiDef_Visibility {
}

impl ::std::default::Default for ApiDef_Visibility {
    fn default() -> Self {
        ApiDef_Visibility::DEFAULT_VISIBILITY
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiDef_Visibility {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ApiDefs {
    // message fields
    pub op: ::protobuf::RepeatedField<ApiDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiDefs {
    fn default() -> &'a ApiDefs {
        <ApiDefs as ::protobuf::Message>::default_instance()
    }
}

impl ApiDefs {
    pub fn new() -> ApiDefs {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.ApiDef op = 1;


    pub fn get_op(&self) -> &[ApiDef] {
        &self.op
    }
    pub fn clear_op(&mut self) {
        self.op.clear();
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: ::protobuf::RepeatedField<ApiDef>) {
        self.op = v;
    }

    // Mutable pointer to the field.
    pub fn mut_op(&mut self) -> &mut ::protobuf::RepeatedField<ApiDef> {
        &mut self.op
    }

    // Take field
    pub fn take_op(&mut self) -> ::protobuf::RepeatedField<ApiDef> {
        ::std::mem::replace(&mut self.op, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ApiDefs {
    fn is_initialized(&self) -> bool {
        for v in &self.op {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.op)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.op {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.op {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiDefs {
        ApiDefs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ApiDef>>(
                    "op",
                    |m: &ApiDefs| { &m.op },
                    |m: &mut ApiDefs| { &mut m.op },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ApiDefs>(
                    "ApiDefs",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ApiDefs {
        static mut instance: ::protobuf::lazy::Lazy<ApiDefs> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ApiDefs,
        };
        unsafe {
            instance.get(ApiDefs::new)
        }
    }
}

impl ::protobuf::Clear for ApiDefs {
    fn clear(&mut self) {
        self.op.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiDefs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiDefs {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rapi_def.proto\x12\ntensorflow\x1a\x10attr_value.proto\"\xf6\x07\n\
    \x06ApiDef\x12\"\n\rgraph_op_name\x18\x01\x20\x01(\tR\x0bgraphOpName\x12\
    /\n\x13deprecation_message\x18\x0c\x20\x01(\tR\x12deprecationMessage\x12\
    /\n\x13deprecation_version\x18\r\x20\x01(\x05R\x12deprecationVersion\x12\
    =\n\nvisibility\x18\x02\x20\x01(\x0e2\x1d.tensorflow.ApiDef.VisibilityR\
    \nvisibility\x127\n\x08endpoint\x18\x03\x20\x03(\x0b2\x1b.tensorflow.Api\
    Def.EndpointR\x08endpoint\x12-\n\x06in_arg\x18\x04\x20\x03(\x0b2\x16.ten\
    sorflow.ApiDef.ArgR\x05inArg\x12/\n\x07out_arg\x18\x05\x20\x03(\x0b2\x16\
    .tensorflow.ApiDef.ArgR\x06outArg\x12\x1b\n\targ_order\x18\x0b\x20\x03(\
    \tR\x08argOrder\x12+\n\x04attr\x18\x06\x20\x03(\x0b2\x17.tensorflow.ApiD\
    ef.AttrR\x04attr\x12\x18\n\x07summary\x18\x07\x20\x01(\tR\x07summary\x12\
    \x20\n\x0bdescription\x18\x08\x20\x01(\tR\x0bdescription\x12-\n\x12descr\
    iption_prefix\x18\t\x20\x01(\tR\x11descriptionPrefix\x12-\n\x12descripti\
    on_suffix\x18\n\x20\x01(\tR\x11descriptionSuffix\x1ao\n\x08Endpoint\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1e\n\ndeprecated\x18\x03\
    \x20\x01(\x08R\ndeprecated\x12/\n\x13deprecation_version\x18\x04\x20\x01\
    (\x05R\x12deprecationVersion\x1aX\n\x03Arg\x12\x12\n\x04name\x18\x01\x20\
    \x01(\tR\x04name\x12\x1b\n\trename_to\x18\x02\x20\x01(\tR\x08renameTo\
    \x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x1a\x95\x01\
    \n\x04Attr\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1b\n\trena\
    me_to\x18\x02\x20\x01(\tR\x08renameTo\x12:\n\rdefault_value\x18\x03\x20\
    \x01(\x0b2\x15.tensorflow.AttrValueR\x0cdefaultValue\x12\x20\n\x0bdescri\
    ption\x18\x04\x20\x01(\tR\x0bdescription\"G\n\nVisibility\x12\x16\n\x12D\
    EFAULT_VISIBILITY\x10\0\x12\x0b\n\x07VISIBLE\x10\x01\x12\x08\n\x04SKIP\
    \x10\x02\x12\n\n\x06HIDDEN\x10\x03\"-\n\x07ApiDefs\x12\"\n\x02op\x18\x01\
    \x20\x03(\x0b2\x12.tensorflow.ApiDefR\x02opBl\n\x18org.tensorflow.framew\
    orkB\x0cApiDefProtosP\x01Z=github.com/tensorflow/tensorflow/tensorflow/g\
    o/core/framework\xf8\x01\x01J\xee2\n\x07\x12\x05\x03\0\x87\x01\x01\n~\n\
    \x01\x0c\x12\x03\x03\0\x122t\x20Defines\x20the\x20text\x20format\x20for\
    \x20including\x20per-op\x20API\x20definition\x20and\n\x20overrides\x20fo\
    r\x20client\x20language\x20op\x20code\x20generators.\n\n\x08\n\x01\x02\
    \x12\x03\x05\x08\x12\n\x08\n\x01\x08\x12\x03\x06\0\x1f\n\x0b\n\x04\x08\
    \xe7\x07\0\x12\x03\x06\0\x1f\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x06\
    \x07\x17\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x06\x07\x17\n\x0e\n\x07\
    \x08\xe7\x07\0\x02\0\x01\x12\x03\x06\x07\x17\n\x0c\n\x05\x08\xe7\x07\0\
    \x03\x12\x03\x06\x1a\x1e\n\x08\n\x01\x08\x12\x03\x07\0-\n\x0b\n\x04\x08\
    \xe7\x07\x01\x12\x03\x07\0-\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x07\
    \x07\x1b\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x07\x07\x1b\n\x0e\n\x07\
    \x08\xe7\x07\x01\x02\0\x01\x12\x03\x07\x07\x1b\n\x0c\n\x05\x08\xe7\x07\
    \x01\x07\x12\x03\x07\x1e,\n\x08\n\x01\x08\x12\x03\x08\0\"\n\x0b\n\x04\
    \x08\xe7\x07\x02\x12\x03\x08\0\"\n\x0c\n\x05\x08\xe7\x07\x02\x02\x12\x03\
    \x08\x07\x1a\n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\x08\x07\x1a\n\x0e\n\
    \x07\x08\xe7\x07\x02\x02\0\x01\x12\x03\x08\x07\x1a\n\x0c\n\x05\x08\xe7\
    \x07\x02\x03\x12\x03\x08\x1d!\n\x08\n\x01\x08\x12\x03\t\01\n\x0b\n\x04\
    \x08\xe7\x07\x03\x12\x03\t\01\n\x0c\n\x05\x08\xe7\x07\x03\x02\x12\x03\t\
    \x07\x13\n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\t\x07\x13\n\x0e\n\x07\
    \x08\xe7\x07\x03\x02\0\x01\x12\x03\t\x07\x13\n\x0c\n\x05\x08\xe7\x07\x03\
    \x07\x12\x03\t\x160\n\x08\n\x01\x08\x12\x03\n\0T\n\x0b\n\x04\x08\xe7\x07\
    \x04\x12\x03\n\0T\n\x0c\n\x05\x08\xe7\x07\x04\x02\x12\x03\n\x07\x11\n\r\
    \n\x06\x08\xe7\x07\x04\x02\0\x12\x03\n\x07\x11\n\x0e\n\x07\x08\xe7\x07\
    \x04\x02\0\x01\x12\x03\n\x07\x11\n\x0c\n\x05\x08\xe7\x07\x04\x07\x12\x03\
    \n\x14S\n\t\n\x02\x03\0\x12\x03\x0b\x07\x19\n\xcc\x06\n\x02\x04\0\x12\
    \x05\x1d\0\x83\x01\x01\x1a\xbe\x06\x20Used\x20to\x20specify\x20and\x20ov\
    erride\x20the\x20default\x20API\x20&\x20behavior\x20in\x20the\n\x20gener\
    ated\x20code\x20for\x20client\x20languages,\x20from\x20what\x20you\x20wo\
    uld\x20get\x20from\n\x20the\x20OpDef\x20alone.\x20There\x20will\x20be\
    \x20a\x20set\x20of\x20ApiDefs\x20that\x20are\x20common\n\x20to\x20all\
    \x20client\x20languages,\x20and\x20another\x20set\x20per\x20client\x20la\
    nguage.\n\x20The\x20per-client-language\x20ApiDefs\x20will\x20inherit\
    \x20values\x20from\x20the\n\x20common\x20ApiDefs\x20which\x20it\x20can\
    \x20either\x20replace\x20or\x20modify.\n\n\x20We\x20separate\x20the\x20A\
    PI\x20definition\x20from\x20the\x20OpDef\x20so\x20we\x20can\x20evolve\
    \x20the\n\x20API\x20while\x20remaining\x20backwards\x20compatible\x20whe\
    n\x20interpretting\x20old\n\x20graphs.\x20\x20Overrides\x20go\x20in\x20a\
    n\x20\"api_def.pbtxt\"\x20file\x20with\x20a\x20text-format\n\x20ApiDefs\
    \x20message.\n\n\x20WARNING:\x20Be\x20*very*\x20careful\x20changing\x20t\
    he\x20API\x20for\x20any\x20existing\x20op\x20--\n\x20you\x20can\x20chang\
    e\x20the\x20semantics\x20of\x20existing\x20code.\x20\x20These\x20changes\
    \x20may\n\x20need\x20to\x20wait\x20until\x20a\x20major\x20release\x20of\
    \x20TensorFlow\x20to\x20avoid\x20breaking\n\x20our\x20compatibility\x20p\
    romises.\n\n\n\n\x03\x04\0\x01\x12\x03\x1d\x08\x0e\nD\n\x04\x04\0\x02\0\
    \x12\x03\x1f\x02\x1b\x1a7\x20Name\x20of\x20the\x20op\x20(in\x20the\x20Op\
    Def)\x20to\x20specify\x20the\x20API\x20for.\n\n\r\n\x05\x04\0\x02\0\x04\
    \x12\x04\x1f\x02\x1d\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1f\x02\x08\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1f\t\x16\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x1f\x19\x1a\n\xb9\x01\n\x04\x04\0\x02\x01\x12\x03#\x02\"\
    \x1a\xab\x01\x20If\x20this\x20op\x20is\x20deprecated,\x20set\x20deprecat\
    ion\x20message\x20to\x20the\x20message\n\x20that\x20should\x20be\x20logg\
    ed\x20when\x20this\x20op\x20is\x20used.\n\x20The\x20message\x20should\
    \x20indicate\x20alternative\x20op\x20to\x20use,\x20if\x20any.\n\n\r\n\
    \x05\x04\0\x02\x01\x04\x12\x04#\x02\x1f\x1b\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03#\t\x1c\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03#\x1f!\n\xaf\x01\n\x04\x04\0\x02\x02\x12\
    \x03'\x02!\x1a\xa1\x01\x20Major\x20version\x20when\x20the\x20op\x20will\
    \x20be\x20deleted.\x20For\x20e.g.\x20set\x20this\n\x20value\x20to\x202\
    \x20if\x20op\x20API\x20should\x20be\x20removed\x20in\x20TensorFlow\x202.\
    0\x20and\n\x20deprecated\x20in\x20versions\x20before\x20that.\n\n\r\n\
    \x05\x04\0\x02\x02\x04\x12\x04'\x02#\"\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03'\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03'\x08\x1b\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03'\x1e\x20\n\x0c\n\x04\x04\0\x04\0\x12\x04)\x02\
    5\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03)\x07\x11\nm\n\x06\x04\0\x04\0\
    \x02\0\x12\x03,\x04\x1b\x1a^\x20Normally\x20this\x20is\x20\"VISIBLE\"\
    \x20unless\x20you\x20are\x20inheriting\x20a\n\x20different\x20value\x20f\
    rom\x20another\x20ApiDef.\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03,\
    \x04\x16\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03,\x19\x1a\n-\n\x06\x04\
    \0\x04\0\x02\x01\x12\x03.\x04\x10\x1a\x1e\x20Publicly\x20visible\x20in\
    \x20the\x20API.\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03.\x04\x0b\n\
    \x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03.\x0e\x0f\n\x84\x01\n\x06\x04\
    \0\x04\0\x02\x02\x12\x031\x04\r\x1au\x20Do\x20not\x20include\x20this\x20\
    op\x20in\x20the\x20generated\x20API.\x20If\x20visibility\x20is\n\x20set\
    \x20to\x20'SKIP',\x20other\x20fields\x20are\x20ignored\x20for\x20this\
    \x20op.\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x031\x04\x08\n\x0e\n\
    \x07\x04\0\x04\0\x02\x02\x02\x12\x031\x0b\x0c\n|\n\x06\x04\0\x04\0\x02\
    \x03\x12\x034\x04\x0f\x1am\x20Hide\x20this\x20op\x20by\x20putting\x20it\
    \x20into\x20an\x20internal\x20namespace\x20(or\x20whatever\n\x20is\x20ap\
    propriate\x20in\x20the\x20target\x20language).\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x03\x01\x12\x034\x04\n\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x034\
    \r\x0e\n\x0b\n\x04\x04\0\x02\x03\x12\x036\x02\x1c\n\r\n\x05\x04\0\x02\
    \x03\x04\x12\x046\x025\x03\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x036\x02\
    \x0c\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x036\r\x17\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x036\x1a\x1b\n\xde\x01\n\x04\x04\0\x03\0\x12\x04<\x02K\x03\
    \x1a\xcf\x01\x20If\x20you\x20specify\x20any\x20endpoint,\x20this\x20will\
    \x20replace\x20all\x20of\x20the\n\x20inherited\x20endpoints.\x20\x20The\
    \x20first\x20endpoint\x20should\x20be\x20the\n\x20\"canonical\"\x20endpo\
    int,\x20and\x20should\x20not\x20be\x20deprecated\x20(unless\x20all\n\x20\
    endpoints\x20are\x20deprecated).\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03<\
    \n\x12\n\xb1\x01\n\x06\x04\0\x03\0\x02\0\x12\x03@\x04\x14\x1a\xa1\x01\
    \x20Name\x20should\x20be\x20either\x20like\x20\"CamelCaseName\"\x20or\n\
    \x20\"Package.CamelCaseName\".\x20Client-language-specific\x20ApiDefs\
    \x20may\n\x20use\x20a\x20snake_case\x20convention\x20instead\x20of\x20Ca\
    melCase.\n\n\x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\x04@\x04<\x14\n\x0e\n\
    \x07\x04\0\x03\0\x02\0\x05\x12\x03@\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x01\x12\x03@\x0b\x0f\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03@\x12\x13\
    \n\xe2\x01\n\x06\x04\0\x03\0\x02\x01\x12\x03E\x04\x18\x1a\xd2\x01\x20Set\
    \x20if\x20this\x20endpoint\x20is\x20deprecated.\x20If\x20set\x20to\x20tr\
    ue,\x20a\x20message\x20suggesting\n\x20to\x20use\x20a\x20non-deprecated\
    \x20endpoint\x20instead\x20will\x20be\x20printed.\x20If\x20all\n\x20endp\
    oints\x20are\x20deprecated,\x20set\x20deprecation_message\x20in\x20ApiDe\
    f\x20instead.\n\n\x0f\n\x07\x04\0\x03\0\x02\x01\x04\x12\x04E\x04@\x14\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03E\x04\x08\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x01\x12\x03E\t\x13\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\
    \x12\x03E\x16\x17\n\xb8\x01\n\x06\x04\0\x03\0\x02\x02\x12\x03J\x04\"\x1a\
    \xa8\x01\x20Major\x20version\x20when\x20an\x20endpoint\x20will\x20be\x20\
    deleted.\x20For\x20e.g.\x20set\x20this\n\x20value\x20to\x202\x20if\x20en\
    dpoint\x20should\x20be\x20removed\x20in\x20TensorFlow\x202.0\x20and\n\
    \x20deprecated\x20in\x20versions\x20before\x20that.\n\n\x0f\n\x07\x04\0\
    \x03\0\x02\x02\x04\x12\x04J\x04E\x18\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\
    \x12\x03J\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\x02\x01\x12\x03J\n\x1d\n\x0e\
    \n\x07\x04\0\x03\0\x02\x02\x03\x12\x03J\x20!\n\x0b\n\x04\x04\0\x02\x04\
    \x12\x03L\x02!\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03L\x02\n\n\x0c\n\x05\
    \x04\0\x02\x04\x06\x12\x03L\x0b\x13\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03L\x14\x1c\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03L\x1f\x20\n\x0c\n\x04\
    \x04\0\x03\x01\x12\x04N\x02Z\x03\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03N\
    \n\r\n\r\n\x06\x04\0\x03\x01\x02\0\x12\x03O\x04\x14\n\x0f\n\x07\x04\0\
    \x03\x01\x02\0\x04\x12\x04O\x04N\x0f\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\
    \x12\x03O\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\x03O\x0b\x0f\n\
    \x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03O\x12\x13\n\xca\x01\n\x06\x04\
    \0\x03\x01\x02\x01\x12\x03T\x04\x19\x1a\xba\x01\x20Change\x20the\x20name\
    \x20used\x20to\x20access\x20this\x20arg\x20in\x20the\x20API\x20from\x20w\
    hat\n\x20is\x20used\x20in\x20the\x20GraphDef.\x20\x20Note\x20that\x20the\
    se\x20names\x20in\x20`backticks`\n\x20will\x20also\x20be\x20replaced\x20\
    in\x20the\x20summary\x20&\x20description\x20fields.\n\n\x0f\n\x07\x04\0\
    \x03\x01\x02\x01\x04\x12\x04T\x04O\x14\n\x0e\n\x07\x04\0\x03\x01\x02\x01\
    \x05\x12\x03T\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03T\x0b\
    \x14\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03T\x17\x18\n\xc2\x01\n\
    \x06\x04\0\x03\x01\x02\x02\x12\x03Y\x04\x1b\x1a\xb2\x01\x20Note:\x20this\
    \x20will\x20replace\x20any\x20inherited\x20arg\x20doc.\x20There\x20is\
    \x20no\n\x20current\x20way\x20of\x20modifying\x20arg\x20descriptions\x20\
    (other\x20than\x20replacing\n\x20them\x20entirely)\x20as\x20can\x20be\
    \x20done\x20with\x20op\x20descriptions.\n\n\x0f\n\x07\x04\0\x03\x01\x02\
    \x02\x04\x12\x04Y\x04T\x19\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x05\x12\x03\
    Y\x04\n\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x01\x12\x03Y\x0b\x16\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x02\x03\x12\x03Y\x19\x1a\n\x0b\n\x04\x04\0\x02\
    \x05\x12\x03[\x02\x1a\n\x0c\n\x05\x04\0\x02\x05\x04\x12\x03[\x02\n\n\x0c\
    \n\x05\x04\0\x02\x05\x06\x12\x03[\x0b\x0e\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03[\x0f\x15\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03[\x18\x19\n\x0b\n\
    \x04\x04\0\x02\x06\x12\x03\\\x02\x1b\n\x0c\n\x05\x04\0\x02\x06\x04\x12\
    \x03\\\x02\n\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\\\x0b\x0e\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03\\\x0f\x16\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\\\x19\x1a\n\xa8\x01\n\x04\x04\0\x02\x07\x12\x03`\x02!\x1a\x9a\x01\
    \x20List\x20of\x20original\x20in_arg\x20names\x20to\x20specify\x20new\
    \x20argument\x20order.\n\x20Length\x20of\x20arg_order\x20should\x20be\
    \x20either\x20empty\x20to\x20keep\x20current\x20order\n\x20or\x20match\
    \x20size\x20of\x20in_arg.\n\n\x0c\n\x05\x04\0\x02\x07\x04\x12\x03`\x02\n\
    \n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03`\x0b\x11\n\x0c\n\x05\x04\0\x02\
    \x07\x01\x12\x03`\x12\x1b\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03`\x1e\x20\
    \n\xae\x01\n\x04\x04\0\x03\x02\x12\x04e\x02v\x03\x1a\x9f\x01\x20Descript\
    ion\x20of\x20the\x20graph-construction-time\x20configuration\x20of\x20th\
    is\n\x20Op.\x20\x20That\x20is\x20to\x20say,\x20this\x20describes\x20the\
    \x20attr\x20fields\x20that\x20will\n\x20be\x20specified\x20in\x20the\x20\
    NodeDef.\n\n\x0c\n\x05\x04\0\x03\x02\x01\x12\x03e\n\x0e\n\r\n\x06\x04\0\
    \x03\x02\x02\0\x12\x03f\x04\x14\n\x0f\n\x07\x04\0\x03\x02\x02\0\x04\x12\
    \x04f\x04e\x10\n\x0e\n\x07\x04\0\x03\x02\x02\0\x05\x12\x03f\x04\n\n\x0e\
    \n\x07\x04\0\x03\x02\x02\0\x01\x12\x03f\x0b\x0f\n\x0e\n\x07\x04\0\x03\
    \x02\x02\0\x03\x12\x03f\x12\x13\n\xcb\x01\n\x06\x04\0\x03\x02\x02\x01\
    \x12\x03k\x04\x19\x1a\xbb\x01\x20Change\x20the\x20name\x20used\x20to\x20\
    access\x20this\x20attr\x20in\x20the\x20API\x20from\x20what\n\x20is\x20us\
    ed\x20in\x20the\x20GraphDef.\x20\x20Note\x20that\x20these\x20names\x20in\
    \x20`backticks`\n\x20will\x20also\x20be\x20replaced\x20in\x20the\x20summ\
    ary\x20&\x20description\x20fields.\n\n\x0f\n\x07\x04\0\x03\x02\x02\x01\
    \x04\x12\x04k\x04f\x14\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x05\x12\x03k\
    \x04\n\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x01\x12\x03k\x0b\x14\n\x0e\n\
    \x07\x04\0\x03\x02\x02\x01\x03\x12\x03k\x17\x18\n\xd7\x01\n\x06\x04\0\
    \x03\x02\x02\x02\x12\x03q\x04\x20\x1a\xc7\x01\x20Specify\x20a\x20new\x20\
    default\x20value\x20to\x20use\x20for\x20this\x20attr.\x20\x20This\x20def\
    ault\n\x20will\x20be\x20used\x20when\x20creating\x20new\x20graphs,\x20as\
    \x20opposed\x20to\x20the\n\x20default\x20in\x20the\x20OpDef,\x20which\
    \x20will\x20be\x20used\x20when\x20interpreting\x20old\n\x20GraphDefs.\n\
    \n\x0f\n\x07\x04\0\x03\x02\x02\x02\x04\x12\x04q\x04k\x19\n\x0e\n\x07\x04\
    \0\x03\x02\x02\x02\x06\x12\x03q\x04\r\n\x0e\n\x07\x04\0\x03\x02\x02\x02\
    \x01\x12\x03q\x0e\x1b\n\x0e\n\x07\x04\0\x03\x02\x02\x02\x03\x12\x03q\x1e\
    \x1f\n\x9e\x01\n\x06\x04\0\x03\x02\x02\x03\x12\x03u\x04\x1b\x1a\x8e\x01\
    \x20Note:\x20this\x20will\x20replace\x20any\x20inherited\x20attr\x20doc,\
    \x20there\x20is\x20no\x20current\n\x20way\x20of\x20modifying\x20attr\x20\
    descriptions\x20as\x20can\x20be\x20done\x20with\x20op\x20descriptions.\n\
    \n\x0f\n\x07\x04\0\x03\x02\x02\x03\x04\x12\x04u\x04q\x20\n\x0e\n\x07\x04\
    \0\x03\x02\x02\x03\x05\x12\x03u\x04\n\n\x0e\n\x07\x04\0\x03\x02\x02\x03\
    \x01\x12\x03u\x0b\x16\n\x0e\n\x07\x04\0\x03\x02\x02\x03\x03\x12\x03u\x19\
    \x1a\n\x0b\n\x04\x04\0\x02\x08\x12\x03w\x02\x19\n\x0c\n\x05\x04\0\x02\
    \x08\x04\x12\x03w\x02\n\n\x0c\n\x05\x04\0\x02\x08\x06\x12\x03w\x0b\x0f\n\
    \x0c\n\x05\x04\0\x02\x08\x01\x12\x03w\x10\x14\n\x0c\n\x05\x04\0\x02\x08\
    \x03\x12\x03w\x17\x18\nG\n\x04\x04\0\x02\t\x12\x03z\x02\x15\x1a:\x20One-\
    line\x20human-readable\x20description\x20of\x20what\x20the\x20Op\x20does\
    .\n\n\r\n\x05\x04\0\x02\t\x04\x12\x04z\x02w\x19\n\x0c\n\x05\x04\0\x02\t\
    \x05\x12\x03z\x02\x08\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03z\t\x10\n\x0c\n\
    \x05\x04\0\x02\t\x03\x12\x03z\x13\x14\nQ\n\x04\x04\0\x02\n\x12\x03}\x02\
    \x19\x1aD\x20Additional,\x20longer\x20human-readable\x20description\x20o\
    f\x20what\x20the\x20Op\x20does.\n\n\r\n\x05\x04\0\x02\n\x04\x12\x04}\x02\
    z\x15\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03}\x02\x08\n\x0c\n\x05\x04\0\x02\
    \n\x01\x12\x03}\t\x14\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03}\x17\x18\na\n\
    \x04\x04\0\x02\x0b\x12\x04\x81\x01\x02\x20\x1aS\x20Modify\x20an\x20exist\
    ing/inherited\x20description\x20by\x20adding\x20text\x20to\x20the\x20beg\
    inning\n\x20or\x20end.\n\n\x0e\n\x05\x04\0\x02\x0b\x04\x12\x05\x81\x01\
    \x02}\x19\n\r\n\x05\x04\0\x02\x0b\x05\x12\x04\x81\x01\x02\x08\n\r\n\x05\
    \x04\0\x02\x0b\x01\x12\x04\x81\x01\t\x1b\n\r\n\x05\x04\0\x02\x0b\x03\x12\
    \x04\x81\x01\x1e\x1f\n\x0c\n\x04\x04\0\x02\x0c\x12\x04\x82\x01\x02!\n\
    \x0f\n\x05\x04\0\x02\x0c\x04\x12\x06\x82\x01\x02\x81\x01\x20\n\r\n\x05\
    \x04\0\x02\x0c\x05\x12\x04\x82\x01\x02\x08\n\r\n\x05\x04\0\x02\x0c\x01\
    \x12\x04\x82\x01\t\x1b\n\r\n\x05\x04\0\x02\x0c\x03\x12\x04\x82\x01\x1e\
    \x20\n\x0c\n\x02\x04\x01\x12\x06\x85\x01\0\x87\x01\x01\n\x0b\n\x03\x04\
    \x01\x01\x12\x04\x85\x01\x08\x0f\n\x0c\n\x04\x04\x01\x02\0\x12\x04\x86\
    \x01\x02\x19\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x86\x01\x02\n\n\r\n\x05\
    \x04\x01\x02\0\x06\x12\x04\x86\x01\x0b\x11\n\r\n\x05\x04\x01\x02\0\x01\
    \x12\x04\x86\x01\x12\x14\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\x86\x01\x17\
    \x18b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
